#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;

my $usage = <<EOS;
  Synopsis: metahistory [options] -suffix 

  Reports a history of filename keys, from a database of key1-key2 pairs, where
  key2 derives from key1.
  
  Example: 
    metahistory -key LF-t2h 
    generates (depending on key history):  LF-t2h <== LF-MsI <== initial_file.fa

  Required:
    -key    name of key; history of this key will be returned.
            The reserved terms 'ALL' or 'all' will return the list of all 
            keys and values (though in no particular order)
  
  Options:
    -registry   Base filename for "registries" of metadata keys. Default "registry"
    -base_dir   Full/absolute directory path to registry files, e.g. "/home/ME/metadata" 
  
    -help       This message. 
  
EOS

my $key;
my $help;

my $base_dir = glob("~/metadata"); 
#my $base_dir = "/usr/local/www/data/metadata"; 
my $registry = "registry"; 

GetOptions (
  "key=s" =>           \$key,   # required
  "registry:s" =>      \$registry,
  "base_dir:s" =>      \$registry,
  "help" =>            \$help,
);

die "\n$usage\n" if ( $help or !defined($key) );

my $registry_rev_hist = "$base_dir/$registry" . "_rev_hist.txt";

#my $dbh_hist = new BerkeleyDB::Hash(
#        -Filename => $registry_rev_hist,
#        -Flags    => DB_CREATE)
#        or die "Error opening $registry_rev_hist : $! $BerkeleyDB::Error\n";
open(my $DBH_HIST, "<", $registry_rev_hist) or die "can't open in $registry_rev_hist:$!\n";

my %hash;
while (<$DBH_HIST>) {
  chomp;
  my ($k, $v) = split /\s/, $_;
  $hash{$k} = $v;
  if ( $key eq "ALL" or $key eq "all"  ) {
    print "$k\t$v\n";
  }
  else {
    if ($k =~ $key) {
      print "$k\t$v\n";
    }
  }
}

__END__
VERSIONS

v01 May 19'16 S. Cannon. Start
v02 May 25'16 SC Add "ALL" reserved term for -key to get a list of all keys and values
v03 Jun 4'16 SC Replace BerkeleyDB with plain tab-del text output 
                 (for ease of inspection & editing).
v04 06-13-16 SC Set default output directory to glob("~/metadata/). The idea is to write keys 
             and log locally and then merge in a git repository.
v05 06-23-16 SC Clean up filename creation.

